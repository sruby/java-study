<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd ">
<!-- 如果你有太多具有相同名称的初始化或者销毁方法的 Bean，那么你不需要在每一个 bean 上声明初始化方法和销毁方法 -->
	<!-- default-init-method="init" default-destroy-method="destroy"> -->

	<!-- 该作用域将 bean 的定义的限制在每一个 Spring IoC 容器中的一个单一实例(默认)。 -->
	<bean id="helloWorld" class="io.github.sruby.spring.bean.HelloWorld"
		scope="singleton" init-method="init" destroy-method="destroy">
		<property name="message" value="hello world"></property>
	</bean>

	<bean id="helloWorld2" class="io.github.sruby.spring.bean.HelloWorld2"
		scope="prototype">
		<property name="message" value="hello world"></property>
	</bean>
	<!-- bean后置处理器 -->
	<bean class="io.github.sruby.spring.bean.beanpostprocessor.InitHelloWorld" />

	<bean id="helloIndia" class="io.github.sruby.spring.bean.HelloIndia"
		>
		<property name="message1" value="Hello India!" />
		<property name="message2" value="Namaste India!" />
	</bean>

	<!-- Definition for textEditor bean -->
	<bean id="textEditor" class="io.github.sruby.spring.di.constructorbased.TextEditor">
		<constructor-arg ref="spellChecker" />
	</bean>
	<!-- Definition for spellChecker bean -->
	<bean id="spellChecker" class="io.github.sruby.spring.di.constructorbased.SpellChecker">
	</bean>

	<!-- Definition for textEditor bean -->
	<bean id="textEditor2" class="io.github.sruby.spring.di.setterbased.TextEditor">
		<property name="spellChecker" ref="spellChecker" />
	</bean>

	<!-- Definition for textEditor bean using inner bean -->
	<bean id="textEditor3" class="io.github.sruby.spring.di.innerbean.TextEditor">
		<property name="spellChecker">
			<bean id="spellChecker2"
				class="io.github.sruby.spring.di.constructorbased.SpellChecker" />
		</property>
	</bean>

	<!-- Definition for javaCollection -->
	<bean id="javaCollection" class="io.github.sruby.spring.di.collection.JavaCollection">
		<!-- results in a setAddressList(java.util.List) call -->
		<property name="addressList">
			<list>
				<value>INDIA</value>
				<value>Pakistan</value>
				<value>USA</value>
				<value>USA</value>
			</list>
		</property>
		<!-- results in a setAddressSet(java.util.Set) call -->
		<property name="addressSet">
			<set>
				<value>INDIA</value>
				<value>Pakistan</value>
				<value>USA</value>
				<value>USA</value>
			</set>
		</property>
		<!-- results in a setAddressMap(java.util.Map) call -->
		<property name="addressMap">
			<map>
				<entry key="1" value="INDIA" />
				<entry key="2" value="Pakistan" />
				<entry key="3" value="USA" />
				<entry key="4" value="USA" />
			</map>
		</property>
		<!-- results in a setAddressProp(java.util.Properties) call -->
		<property name="addressProp">
			<props>
				<prop key="one">INDIA</prop>
				<prop key="two">Pakistan</prop>
				<prop key="three">USA</prop>
				<prop key="four">USA</prop>
			</props>
		</property>
	</bean>
	<!-- 启用@AspectJ注解支持 -->
	<!-- <aop:aspectj-autoproxy/> -->
	
	<bean id="student" class="io.github.sruby.spring.aop.xml.Student">
		<property name="name" value="Zara" />
		<property name="age" value="11" />
	</bean>
	<bean id="student2" class="io.github.sruby.annotation.point.Student">
		<property name="name" value="Zara" />
		<property name="age" value="11" />
	</bean>
	<!-- Definition for logging aspect -->
	<bean id="logging" class="io.github.sruby.spring.aop.xml.Logging" />
	<bean id="logging2" class="io.github.sruby.spring.aop.annotate.Logging" />
	
	<aop:config>
		<aop:aspect id="log" ref="logging">
			<aop:pointcut id="selectAll"
				expression="execution(* io.github.sruby.spring.aop.xml.*.*(..))" />
			<aop:before pointcut-ref="selectAll" method="beforeAdvice" />
			<aop:after pointcut-ref="selectAll" method="afterAdvice" />
			<aop:after-returning pointcut-ref="selectAll"
				returning="retVal" method="afterReturningAdvice" />
			<aop:after-throwing pointcut-ref="selectAll"
				throwing="ex" method="AfterThrowingAdvice" />
		</aop:aspect>
	</aop:config>
	<!-- Definition for student bean -->
	
	<!-- 积分业务前置处理实现类start -->
	<!-- 积分业务处理切面 -->
	<aop:config>
		<aop:aspect id="pointAnnotationAnalysisAop" ref="pointAnnotationAnalysis">
			<!-- 通过方法持有的注解匹配，所有持有PointAnnotation注解的方法都会被拦截 -->
			<aop:pointcut id="pointBusiness" 
				expression="execution(@io.github.sruby.annotation.point.PointAnnotation * *(..))" />
				
				<!-- 根据接口匹配 -->
<!-- 			<aop:pointcut id="pointBusiness" 
				expression="execution(* io.github.sruby.annotation.point.PointRelationsBusiness+.*(..))" /> -->
				
			<aop:after pointcut-ref="pointBusiness" method="analysis" />
		</aop:aspect>
	</aop:config>
	<bean id="loginServicePointHandle" class="io.github.sruby.annotation.point.LoginServicePointHandle" />
	<bean id="pointAnnotationAnalysis" class="io.github.sruby.annotation.point.PointAnnotationAnalysis" />
	<bean id="loginService" class="io.github.sruby.annotation.point.LoginService"></bean>
	<bean id="outPackageBusiness" class="io.github.sruby.annotation.OutPackageBusiness"></bean>
	<!-- 积分业务前置处理实现类end -->

</beans>